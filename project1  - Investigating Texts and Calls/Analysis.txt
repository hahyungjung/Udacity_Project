analysis.txt


Step 3 - Calculate Big O
Once you have completed your solution for each problem, perform a run time analysis (Worst Case Big-O Notation) of your solution. Document this for each problem and include this in your submission.

 ######################## Task0 ########################

def task0(texts, calls):

    print("First record of texts,", texts[0][0], "texts", texts[0][1], "at time", texts[0][2])
    print("Last record of calls,", calls[len(calls) - 1][0], "calls", calls[len(calls) - 1][1], "at time", calls[len(calls) - 1][2], ", lasting ", calls[len(calls) - 1][3], "seconds")

--- Analysis ---
O(7) becase the number of outputs are 7

Total : O(1)

######################## Task1 ########################

def task1(texts, calls):

    numbers = []

    for i in range(len(texts)):
        numbers.append(texts[i][0])
        numbers.append(texts[i][1])

    for i in range(len(calls)):
        numbers.append(calls[i][0])
        numbers.append(calls[i][1])

    result = []

    for value in numbers:
        if value not in result:
            result.append(value)

    print("There are", len(result) ,"different telephone numbers in the records.")


--- Analysis ---
O( 3n + 3 ) because creating two variables bring + 2, returing one variable result bring + 1, and three for-loop bring 3n

Total : O(n)


######################## Task2 ########################

def task2(texts, calls):


    slice_list = []

    for i in range(len(calls)):
        slice_list.append([calls[i][0], calls[i][3]])

    for j in range(len(calls)):
        slice_list.append([calls[j][1], calls[j][3]])

    # List of those who made outgoing
    temp = {}

    for i in range(1, len(slice_list)):
        if slice_list[i][0] not in temp.keys():
            temp[slice_list[i][0]] = {
                    "sum": int(slice_list[i][1])
                    }
        else:
            temp[slice_list[i][0]]["sum"] += int(slice_list[i][1])

    out = []

    for key in temp.keys():
        sum_key = int(temp[key]["sum"])
        out.append([key, sum_key])

    max_calls = 0

    for i in range(len(out)):
        if out[i][1] > max_calls:
            max_calls = out[i][1]
            numbers = out[i][0]


    print(numbers, "spent the longest time", max_calls, "seconds on the phone during September 2016.")


task2(texts, calls)


--- Analysis ---
O ( 5n + 6 ) because creating four variables bring + 4, returing two variables bring + 2, five for-loops bring 5n.

Total : O(n)

######################## Task3 ########################


def task3(texts, calls):

    # part A

    calledNumber = []
    res = []

    for i in range(len(calls)):
        if calls[i][0][0:5] == "(080)":
            if calls[i][1][0] == "7" or calls[i][1][0] == "8" or calls[i][1][0] == "9":
                calledNumber.append(calls[i][1][0:4])
            elif calls[i][1][0:3] == "140":
                calledNumber.append("140")
            elif calls[i][1][0] == "(":
                for j in range(len(calls[i][1])):
                    if calls[i][1][j] == ")":
                        calledNumber.append(calls[i][1][0:(j+1)])

    for i in calledNumber:
        if i not in res:
            res.append(i)


    print("The numbers called by people in Bangalore have codes:", sorted(res))

    # part B


    called_list = []
    received_list = []
    count1 = 0
    count2 = 0

    for i in range(len(calls)):
        called_list.append(calls[i][0])

    for i in range(len(calls)):
        received_list.append(calls[i][1])

    for i in range(len(calls)):
        if "(080)" in called_list[i][0:5]:
            count1 += 1
            if "(080)" in received_list[i][0:5]:
                count2 += 1
    percentageBanga = count2 / count1 * 100  

    print(round(percentageBanga, 2), "percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.")

task3(texts, calls)

--- Analysis ---

Part A

O ( 2n + 2 + n log n ) because two for-loops bring 2n, creating two variables bring + 2, and sorting brings n log n.

Total : O (n log n)

Part B 

O ( 3n + 6 ) because three for-loogs bring 3n, creating 5 variables and returing one variable bring + 6 

Total : O (n)

===> Total : O (n log n)

######################## Task4 ########################


def task4(texts, calls):

    callers = set()
    called = set()
    texters = set()
    texted = set()

    for i in range(len(calls)):
       callers.add(calls[i][0])
       called.add(calls[i][1])

    for i in range(len(texts)):
        texters.add(texts[i][0])
        texted.add(texts[i][1])

    callers = callers.difference(called)
    callers = callers.difference(texters)
    callers = callers.difference(texted)

    print("These numbers could be telemarketers: ", sorted(callers))

task4(texts, calls)



--- Analysis ---

O ( n + 5 + n log n ) because creating four sets and returing one variable brings + 5, one for-loop brings n, and sorting brings n log n

Total : O ( n log n )






